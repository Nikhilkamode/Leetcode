In a gold mine grid of size m x n, each cell in this mine has an integer representing the amount of gold in that cell, 0 if it is empty.

Return the maximum amount of gold you can collect under the conditions:

Every time you are located in a cell you will collect all the gold in that cell.
From your position, you can walk one step to the left, right, up, or down.
You can't visit the same cell more than once.
Never visit a cell with 0 gold.
You can start and stop collecting gold from any position in the grid that has some gold.
 

Example 1:

Input: grid = [[0,6,0],[5,8,7],[0,9,0]]
Output: 24
Explanation:
[[0,6,0],
 [5,8,7],
 [0,9,0]]
Path to get the maximum gold, 9 -> 8 -> 7.
Example 2:

Input: grid = [[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]]
Output: 28
Explanation:
[[1,0,7],
 [2,0,6],
 [3,4,5],
 [0,3,0],
 [9,0,20]]
Path to get the maximum gold, 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7.
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 15
0 <= grid[i][j] <= 100
There are at most 25 cells containing gold.

/*Let's Solve using Cpp*/
class Solution {
public:
    int getMaximumGold(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        int maxGold = 0;

        // Helper function for DFS
        function<int(int, int)> helper = [&](int row, int col) -> int {
            if (row < 0 || row >= m || col < 0 || col >= n ||
                grid[row][col] == 0) {
                return 0;
            }

            int currentGold = grid[row][col];
            grid[row][col] = 0; // Mark the cell as visited by setting it to 0

            // Recursively explore all four directions
            int d = helper(row + 1, col);
            int u = helper(row - 1, col);
            int r = helper(row, col + 1);
            int l = helper(row, col - 1);

            // Restore the cell value
            grid[row][col] = currentGold;

            return currentGold + max({d, u, r, l});
        };

        // Iterate over all cells in the grid
        for (int row = 0; row < m; ++row) {
            for (int col = 0; col < n; ++col) {
                if (grid[row][col] > 0) {
                    maxGold = max(maxGold, helper(row, col));
                }
            }
        }

        return maxGold;
    }
};

Given an integer array nums and an integer k, return the number of non-empty subarrays that have a sum divisible by k.

A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [4,5,0,-2,-3,1], k = 5
Output: 7
Explanation: There are 7 subarrays with a sum divisible by k = 5:
[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]
Example 2:

Input: nums = [5], k = 9
Output: 0
 

Constraints:

1 <= nums.length <= 3 * 104
-104 <= nums[i] <= 104
2 <= k <= 104

Let's solve using cpp

class Solution {
public:
    static int subarraysDivByK(vector<int>& nums, int k) {
        vector<int> mod_k(k, 0);//2 <= k <= 10^4 array is good
        int prefix=0;
        mod_k[0]=1;// consider prefix sums that are directly divisible by k

        for(int x: nums){
            prefix=(prefix+x)%k;
            prefix+=((prefix<0)?k:0);
            mod_k[prefix]++;
        }
        return accumulate(mod_k.begin(), mod_k.end(), 0, [](int sum, int x){
            return sum+x*(x-1)/2;
        });
    }
};





auto init = []() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);
    return 'c';
}();
